# Generated by Django 3.1.1 on 2024-02-19 11:34

from functools import lru_cache
from django.db import migrations, models
import django.db.models.deletion


def remove_cluster_items_flagged_deleted(apps, schema_editor):
    ClusterItem = apps.get_model('backend', 'ClusterItem')
    ClusterItem.objects.filter(deleted=True).delete()

def populate_cluster_item_fields(apps, schema_editor):
    ClusterItem = apps.get_model('backend', 'ClusterItem')
    for item in (ClusterItem.objects.all()
                                    .select_related('plugin_run_result__plugin_run')
                                    .order_by('-plugin_run_result__plugin_run__date',
                                              'plugin_run_result__id')):
        try:
            data = get_data(item.plugin_run_result.data_id)
        except AttributeError as e:
            print(e)
            continue
        for cluster in data.clusters:
            if cluster.id == item.cluster_timeline_item.cluster_id.hex:
                break
        else:
            raise Exception('Cluster not found')
        item.embedding_id = cluster.embedding_ids[item.embedding_index]
        if item.embedding_id in cluster.sample_embedding_ids:
            item.is_sample = True

        image_id =  item.image_path.split('/')[-1].removesuffix('.jpg')

        run_result = (item.plugin_run_result
                          .plugin_run
                          .results
                          .filter(type='I')
                          .first())
        try:
            data = get_data(run_result.data_id)
        except AttributeError as e:
            print(e)
            continue
        for image in data.images:
            if image.id == image_id:
                item.time = image.time
                item.delta_time = image.delta_time
                break

        item.save()


@lru_cache(100)
def get_data(data_id):
    from analyser.data import DataManager
    data_manager = DataManager('/predictions')
    data = data_manager.load(data_id)
    with data:
        return data


class Migration(migrations.Migration):

    dependencies = [
        ('backend', '0017_auto_20240215_0910'),
    ]

    operations = [
        migrations.RunPython(remove_cluster_items_flagged_deleted, migrations.RunPython.noop),
        migrations.AddField(
            model_name='clusteritem',
            name='delta_time',
            field=models.FloatField(default=0.0),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='clusteritem',
            name='is_sample',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='clusteritem',
            name='time',
            field=models.FloatField(default=0.0),
            preserve_default=False,
        ),
        migrations.AlterField(
            model_name='clusteritem',
            name='cluster_timeline_item',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='items', to='backend.clustertimelineitem'),
        ),
        migrations.RemoveField(
            model_name='clusteritem',
            name='deleted',
        ),
        migrations.AlterField(
            model_name='timeline',
            name='type',
            field=models.CharField(choices=[('A', 'ANNOTATION'), ('R', 'PLUGIN_RESULT'), ('T', 'TRANSCRIPT')], default='A', max_length=2),
        ),
        migrations.AddField(
            model_name='clusteritem',
            name='embedding_id',
            field=models.CharField(default='', max_length=100),
            preserve_default=False,
        ),
        migrations.AlterField(
            model_name='pluginrunresult',
            name='plugin_run',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='results', to='backend.pluginrun'),
        ),
        migrations.RunPython(populate_cluster_item_fields, migrations.RunPython.noop),
        migrations.RemoveField(
            model_name='clusteritem',
            name='embedding_index',
        ),
    ]
